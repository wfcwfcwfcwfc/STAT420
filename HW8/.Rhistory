diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
diagnostics <- function(model, pcol = "grey", lcol = "dodgerblue", alpha = 0.05,
plotit = TRUE, testit = TRUE) {
if (testit == TRUE) {
normality_p_val <- shapiro.test(resid(model))$p.value
decision <- ""
if(normality_p_val < alpha) {
decision <- "Reject"
} else {
decision <- "Fail to Reject."
}
res <- list(normality_p_val, decision)
return(res)
}
if(plotit == TRUE) {
par(mfrow=c(1,2))
plot(fitted(model), resid(model), col = pcol, pch = 20,
xlab = "Fitted", ylab = "Residuals.",
main = "Fitted versus Residuals")
abline(h = 0, col = lcol, lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot", col = pcol)
qqline(resid(model), col = lcol, lwd = 2)
}
}
set.seed(40)
data_1 = data.frame(x = runif(n = 30, min = 0, max = 10),
y = rep(x = 0, times = 30))
data_1$y = with(data_1, 2 + 1 * x + rexp(n = 30))
fit_1 = lm(y ~ x, data = data_1)
data_2 = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
diagnostics(fit_1, testit = FALSE, pcol = "black", lcol = "black")
diagnostics <- function(model, pcol = "grey", lcol = "dodgerblue", alpha = 0.05,
plotit = TRUE, testit = TRUE) {
if (testit == TRUE) {
normality_p_val <- shapiro.test(resid(model))$p.value
normality_decision <- ""
if(normality_p_val < alpha) {
normality_decision <- "Reject"
} else {
normality_decision <- "Fail to Reject."
}
res <- list(p_val=normality_p_val, decision=decision)
return(res)
}
if(plotit == TRUE) {
par(mfrow=c(1,2))
plot(fitted(model), resid(model), col = pcol, pch = 20,
xlab = "Fitted", ylab = "Residuals.",
main = "Fitted versus Residuals")
abline(h = 0, col = lcol, lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot", col = pcol)
qqline(resid(model), col = lcol, lwd = 2)
}
}
set.seed(40)
data_1 = data.frame(x = runif(n = 30, min = 0, max = 10),
y = rep(x = 0, times = 30))
data_1$y = with(data_1, 2 + 1 * x + rexp(n = 30))
fit_1 = lm(y ~ x, data = data_1)
data_2 = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics <- function(model, pcol = "grey", lcol = "dodgerblue", alpha = 0.05,
plotit = TRUE, testit = TRUE) {
if (testit == TRUE) {
normality_p_val <- shapiro.test(resid(model))$p.value
normality_decision <- ""
if(normality_p_val < alpha) {
normality_decision <- "Reject"
} else {
normality_decision <- "Fail to Reject."
}
res <- list(p_val=normality_p_val, decision=normality_decision)
return(res)
}
if(plotit == TRUE) {
par(mfrow=c(1,2))
plot(fitted(model), resid(model), col = pcol, pch = 20,
xlab = "Fitted", ylab = "Residuals.",
main = "Fitted versus Residuals")
abline(h = 0, col = lcol, lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot", col = pcol)
qqline(resid(model), col = lcol, lwd = 2)
}
}
set.seed(40)
data_1 = data.frame(x = runif(n = 30, min = 0, max = 10),
y = rep(x = 0, times = 30))
data_1$y = with(data_1, 2 + 1 * x + rexp(n = 30))
fit_1 = lm(y ~ x, data = data_1)
data_2 = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
diagnostics(fit_1, testit = FALSE, pcol = "black", lcol = "black")
diagnostics(fit_2, testit = FALSE, pcol = "grey", lcol = "green")
diagnostics(fit_3)
diagnostics(fit_2, testit = FALSE, pcol = "grey", lcol = "green")
library(faraway)
normality_p_val <- shapiro.test(resid(fit_1))$p.value
?faraway
?prostate
model_2a <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45, data = prostate)
summary(model_2a)$r.squared
diagnostics(model_2a)
diagnostics(fit_3)
diagnostics(fit_3)
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
diagnostics(fit_1, testit = FALSE, pcol = "black", lcol = "black")
diagnostics(fit_2, testit = FALSE, pcol = "grey", lcol = "green")
diagnostics(fit_3)
diagnostics <- function(model, pcol = "grey", lcol = "dodgerblue", alpha = 0.05,
plotit = TRUE, testit = TRUE) {
if (testit == TRUE) {
normality_p_val <- shapiro.test(resid(model))$p.value
normality_decision <- ""
if(normality_p_val < alpha) {
normality_decision <- "Reject"
} else {
normality_decision <- "Fail to Reject."
}
res <- list(p_val=normality_p_val, decision=normality_decision)
}
if(plotit == TRUE) {
par(mfrow=c(1,2))
plot(fitted(model), resid(model), col = pcol, pch = 20,
xlab = "Fitted", ylab = "Residuals.",
main = "Fitted versus Residuals")
abline(h = 0, col = lcol, lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot", col = pcol)
qqline(resid(model), col = lcol, lwd = 2)
}
return(res)
}
model_2a <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45, data = prostate)
summary(model_2a)$r.squared
diagnostics(model_2a)
bptest(model_2a)
library(lmtest)
diagnostics(model_2a)
bptest(model_2a)
diagnostics(model_2a)
hatvalues(model_1) > 2 * mean(hatvalues(model_1))
hatvalues(model_2a) > 2 * mean(hatvalues(model_2a))
prostate[hatvalues(model_2a) > 2 * mean(hatvalues(model_2a)),]
prostate[hatvalues(model_2a) > 2 * mean(hatvalues(model_2a)),'lpsa']
mean(prostate['lpsa'])
prostate['lpsa']
mean(prostate['lpsa'])
mean(prostate$lpsa)
prostate[hatvalues(model_2a) > 2 * mean(hatvalues(model_2a)),'lpsa']
mean(prostate$lpsa)
prostate[hatvalues(model_2a) > 2 * mean(hatvalues(model_2a)),'lpsa']
prostate[hatvalues(model_2a) > 2 * mean(hatvalues(model_2a)),'lpsa']
plot(prostate$lpsa)
mean(hatvalues(model_2a))
prostate[hatvalues(model_2a) > 2 * mean(hatvalues(model_2a))]
prostate[hatvalues(model_2a) > 2 * mean(hatvalues(model_2a))]
prostate[hatvalues(model_2a) > 2 * mean(hatvalues(model_2a)),]
cooks.distance(model_2a)[11] > 4 / length(cooks.distance(model_2a))
cooks.distance(model_2a) > 4 / length(cooks.distance(model_2a))
prostate[cooks.distance(model_2a) > 4 / length(cooks.distance(model_2a)),]
model_2f <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45, data = prostate, subset = prostate[cooks.distance(model_2a) < 4 / length(cooks.distance(model_2a))])
model_2f <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45, data = prostate, subset = cooks.distance(model_2a) < 4 / length(cooks.distance(model_2a)))
cd <- cooks.distance(model_2a)
model_2f <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45, data = prostate, subset = cd < 4 / length(cd))
cd <- cooks.distance(model_2a)
model_2f <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45, data = prostate, subset = cd < 4 / length(cd))
coef(model_2a)
coef(model_2f)
plot(model_2a)
removed <- prostate[cooks.distance(model_2a) > 4 / length(cooks.distance(model_2a)),]
View(removed)
removed <- prostate[cooks.distance(model_2a) > 4 / length(cooks.distance(model_2a)),]
predict(model_2a, newdata = removed)
predict(model_2f, newdata = removed)
n = 50
set.seed(420)
x_1 = runif(n, 0, 5)
x_2 = runif(n, -2, 2)
n = 50
set.seed(420)
x_1 = runif(n, 0, 5)
x_2 = runif(n, -2, 2)
set.seed(83)
library(lmtest)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
bptest(fit_1)
set.seed(83)
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
bptest(fit_2)
num_sims = 2500
p_val_1 = rep(0, num_sims)
p_val_2 = rep(0, num_sims)
birthday = 19880210
set.seed(birthday)
library(lmtest)
p1 <- rep(0, 2500)
p2 <- rep(0, 2500)
for(i in 1:2500) {
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
p1[i] <- bptest(fit_1)$p.value
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
p2[i] <- bptest(fit_2)$p.value
}
library(lmtest)
for(i in 1:2500) {
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
p_val_1[i] <- bptest(fit_1)$p.value
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
p_val_2[i] <- bptest(fit_2)$p.value
}
p_val_1 < 0.01
count(p_val_1 < 0.01)
p_val_1[p_val_1 < 0.01, ]
p_val_1[p_val_1 < 0.01 ]
length(p_val_1[p_val_1 < 0.01])
length(p_val_1[p_val_1 < 0.05])
length(p_val_1[p_val_1 < 0.10])
length(p_val_1[p_val_1 < 0.01]) / num_sims
length(p_val_1[p_val_1 < 0.05]) / num_sims
length(p_val_1[p_val_1 < 0.10]) / num_sims
length(p_val_2[p_val_2 < 0.01]) / num_sims
length(p_val_2[p_val_2 < 0.05]) / num_sims
length(p_val_2[p_val_2 < 0.10]) / num_sims
model
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
coef(fit_1)
summary(fit_1)
summary(fit_1)$coef
summary(fit_1)$coef['x_2', Pr(>|t|)]
summary(fit_1)$coef['x_2', 'Pr(>|t|)']
library(lmtest)
for(i in 1:2500) {
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
p_val_1[i] <- summary(fit_1)$coef['x_2', 'Pr(>|t|)']
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
p_val_2[i] <- summary(fit_1)$coef['x_2', 'Pr(>|t|)']
}
length(p_val_1[p_val_1 < 0.01]) / num_sims
length(p_val_1[p_val_1 < 0.05]) / num_sims
length(p_val_1[p_val_1 < 0.10]) / num_sims
length(p_val_2[p_val_2 < 0.01]) / num_sims
length(p_val_2[p_val_2 < 0.05]) / num_sims
length(p_val_2[p_val_2 < 0.10]) / num_sims
library(lmtest)
for(i in 1:2500) {
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
p_val_1[i] <- summary(fit_1)$coef['x_2', 'Pr(>|t|)']
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
p_val_2[i] <- summary(fit_2)$coef['x_2', 'Pr(>|t|)']
}
length(p_val_1[p_val_1 < 0.01]) / num_sims
length(p_val_1[p_val_1 < 0.05]) / num_sims
length(p_val_1[p_val_1 < 0.10]) / num_sims
length(p_val_2[p_val_2 < 0.01]) / num_sims
length(p_val_2[p_val_2 < 0.05]) / num_sims
length(p_val_2[p_val_2 < 0.10]) / num_sims
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
table_df <- data.frame(model_1 <- c(model_1_a, model_1_b, model_1_c), model_2 <- c(model_2_a, model_2_b, model_2_c))
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
table_df <- data.frame(model_1 <- c(model_1_a, model_1_b, model_1_c), model_2 <- c(model_2_a, model_2_b, model_2_c))
table(table_df)
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
table_df <- data.frame(model_1 <- c(model_1_a, model_1_b, model_1_c), model_2 <- c(model_2_a, model_2_b, model_2_c))
table(table_df$model_1, table_df$model_2)
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
table_df <- data.frame(model1 = c(model_1_a, model_1_b, model_1_c), model_2 = c(model_2_a, model_2_b, model_2_c))
table(table_df$model_1, table_df$model_2)
table_df
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
table_df <- data.frame(model_1 = c(model_1_a, model_1_b, model_1_c), model_2 = c(model_2_a, model_2_b, model_2_c))
table(table_df$model_1, table_df$model_2)
table_df
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
table_df <- data.frame(model_1 = c(model_1_a, model_1_b, model_1_c), model_2 = c(model_2_a, model_2_b, model_2_c))
table(table_df)
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
table_df <- data.frame(model_1 = c(model_1_a, model_1_b, model_1_c), model_2 = c(model_2_a, model_2_b, model_2_c))
table(table_df$model_1)
table_df
model_1_a <- length(p_val_1[p_val_1 < 0.01]) / num_sims
model_1_b <- length(p_val_1[p_val_1 < 0.05]) / num_sims
model_1_c <- length(p_val_1[p_val_1 < 0.10]) / num_sims
model_2_a <- length(p_val_2[p_val_2 < 0.01]) / num_sims
model_2_b <- length(p_val_2[p_val_2 < 0.05]) / num_sims
model_2_c <- length(p_val_2[p_val_2 < 0.10]) / num_sims
table_df <- data.frame(model_1 = c(model_1_a, model_1_b, model_1_c), model_2 = c(model_2_a, model_2_b, model_2_c))
row.names(table_df) <- c("0.01", "0.05", "0.10")
table_df
```{r, message = FALSE, warning = FALSE}
library(faraway)
model_4a <- lm(loss ~ Fe, data = corrosion)
plot(loss ~ Fe, data = corrosion, col = "grey", pch = 20,
main = "Data from corrosion")
fit_1 = lm(y ~ x, data = sim_data_1)
model_4a <- lm(loss ~ Fe, data = corrosion)
plot(loss ~ Fe, data = corrosion, col = "grey", pch = 20,
main = "Data from corrosion")
abline(model_4a, col = "darkorange", lwd = 3)
corrosion
?corrosion
model_4a <- lm(loss ~ Fe, data = corrosion)
plot(loss ~ Fe, data = corrosion, col = "grey", pch = 20,
main = "Data from corrosion")
abline(model_4a, col = "darkorange", lwd = 3)
diagnostics(model_4a)
model_4a <- lm(loss ~ Fe, data = corrosion)
plot(loss ~ Fe, data = corrosion, col = "grey", pch = 20,
main = "Data from corrosion")
abline(model_4a, col = "darkorange", lwd = 3)
diagnostics(model_4a)
bptest(model_4a)
model_4b_2 <- lm(loss ~ I(Fe ^ 2), data = corrosion)
plot(loss ~ Fe, data = corrosion, col = "grey", pch = 20,
main = "Data from corrosion")
abline(model_4a, col = "darkorange", lwd = 3)
diagnostics(model_4a)
bptest(model_4a)
model_4b_2 <- lm(loss ~ I(Fe ^ 2), data = corrosion)
plot(fitted(model_4b_2), resid(model_4b_2), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(model_4b_2, col = "darkorange", lwd = 3)
diagnostics(model_4b_2)
bptest(model_4b_2)
model_4b_2 <- lm(loss ~ I(Fe ^ 2), data = corrosion)
abline(model_4b_2, col = "darkorange", lwd = 3)
model_4b_2 <- lm(loss ~ I(Fe ^ 2), data = corrosion)
abline(model_4b_2, col = "darkorange", lwd = 3)
model_4b_2 <- lm(loss ~ I(Fe ^ 2), data = corrosion)
diagnostics(model_4b_2)
abline(model_4b_2, col = "darkorange", lwd = 3)
bptest(model_4b_2)
model_4b_3 <- lm(loss ~ I(Fe ^ 3), data = corrosion)
diagnostics(model_4b_3)
abline(model_4b_3, col = "darkorange", lwd = 3)
bptest(model_4b_3)
model_4b_4 <- lm(loss ~ I(Fe ^ 4), data = corrosion)
diagnostics(model_4b_4)
abline(model_4b_4, col = "darkorange", lwd = 3)
bptest(model_4b_4)
model_4b_3 <- lm(loss ~ poly(Fe, 3), data = corrosion)
diagnostics(model_4b_3)
abline(model_4b_3, col = "darkorange", lwd = 3)
bptest(model_4b_3)
model_4b_4 <- lm(loss ~ poly(Fe, 4), data = corrosion)
diagnostics(model_4b_4)
abline(model_4b_4, col = "darkorange", lwd = 3)
bptest(model_4b_4)
model_4b_2 <- lm(loss ~ poly(Fe, 2), data = corrosion)
diagnostics(model_4b_2)
abline(model_4b_2, col = "darkorange", lwd = 3)
bptest(model_4b_2)
model_4b_2 <- lm(loss ~ poly(Fe, 2), data = corrosion)
diagnostics(model_4b_2)
bptest(model_4b_2)
ds <- prostate[cooks.distance(model_4b_2) > 4 / length(cooks.distance(model_4b_2)),]
ds
corrosion[cooks.distance(model_4b_2) > 4 / length(cooks.distance(model_4b_2)),]
library(ggplot2)
model_5a <- lm(price ~ carat, data = diamonds)
model_5a <- lm(price ~ carat, data = diamonds)
summary(model_5a)
plot(price ~ carat, data = diamonds, col = "grey", pch = 20,
main = "Data from diamonds")
abline(model_5a, col = "darkorange", lwd = 3)
diagnostics(model_5a)
plot(price ~ carat, data = diamonds, col = "grey", pch = 20,
main = "Data from diamonds")
abline(model_5a, col = "darkorange", lwd = 3)
diagnostics(model_5a, testit = FALSE)
diagnostics <- function(model, pcol = "grey", lcol = "dodgerblue", alpha = 0.05,
plotit = TRUE, testit = TRUE) {
if(plotit == TRUE) {
par(mfrow=c(1,2))
plot(fitted(model), resid(model), col = pcol, pch = 20,
xlab = "Fitted", ylab = "Residuals.",
main = "Fitted versus Residuals")
abline(h = 0, col = lcol, lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot", col = pcol)
qqline(resid(model), col = lcol, lwd = 2)
}
if (testit == TRUE) {
normality_p_val <- shapiro.test(resid(model))$p.value
normality_decision <- ""
if(normality_p_val < alpha) {
normality_decision <- "Reject"
} else {
normality_decision <- "Fail to Reject."
}
res <- list(p_val=normality_p_val, decision=normality_decision)
return(res)
}
}
plot(price ~ carat, data = diamonds, col = "grey", pch = 20,
main = "Data from diamonds")
abline(model_5a, col = "darkorange", lwd = 3)
diagnostics(model_5a, testit = FALSE)
qplot(price, data = diamonds, bins = 30)
model_5c <- lm(log(price) ~ carat, data = diamonds)
plot(log(price) ~ carat, data = diamonds, col = "grey", pch = 20,
main = "Data from diamonds")
abline(model_5c, col = "darkorange", lwd = 3)
diagnostics(model_5a, testit = FALSE)
model_5d <- lm(log(price) ~ log(carat), data = diamonds)
plot(log(price) ~ log(carat), data = diamonds, col = "grey", pch = 20,
main = "Data from diamonds")
abline(model_5d, col = "darkorange", lwd = 3)
diagnostics(model_5a, testit = FALSE)
qplot(price, data = diamonds, bins = 30)
model_5c <- lm(log(price) ~ carat, data = diamonds)
plot(log(price) ~ carat, data = diamonds, col = "grey", pch = 20,
main = "Data from diamonds")
abline(model_5c, col = "darkorange", lwd = 3)
diagnostics(model_5c, testit = FALSE)
model_5d <- lm(log(price) ~ log(carat), data = diamonds)
plot(log(price) ~ log(carat), data = diamonds, col = "grey", pch = 20,
main = "Data from diamonds")
abline(model_5d, col = "darkorange", lwd = 3)
diagnostics(model_5d, testit = FALSE)
predict(model_5d, newdata = data.frame(carat = c(3)), interval = "prediction", level = .99)
res <- predict(model_5d, newdata = data.frame(carat = c(3)), interval = "prediction", level = .99)
exp(res)
diamonds
mean(diamonds$price)
mean(diamonds[diamonds$carat> 3]$price)
diamonds[diamonds$carat> 3]
diamonds[diamonds$carat> 3, ]
diamonds[diamonds$carat> 3, price]
diamonds[diamonds$carat> 3, 'price']
mean(diamonds[diamonds$carat> 3, 'price'])
mean(diamonds[diamonds$carat> 3, 'price']$price)
res <- predict(model_5d, newdata = data.frame(carat = c(log(3))), interval = "prediction", level = .99)
exp(res)
diagnostics(fit_3)
diagnostics(fit_3)
